#!/usr/bin/env ruby

require 'fileutils'
require 'yaml'

class Airu
  RULES_DIR = File.expand_path('~/.airu/rules')
  VERSION_FILE = File.expand_path('~/.airu/versions.yml')
  DEFAULT_CONFIG = {
    'rules_dir' => RULES_DIR,
    'default_rules' => ['project-rule', 'command-rule']
  }
  
  def initialize
    # 設定ファイルを読み込む
    @config = load_config
    
    # ルールディレクトリを設定
    @rules_dir = File.expand_path(@config['rules_dir'])
    
    # ディレクトリが存在しない場合は作成
    FileUtils.mkdir_p(@rules_dir) unless Dir.exist?(@rules_dir)
    FileUtils.mkdir_p(File.dirname(VERSION_FILE)) unless Dir.exist?(File.dirname(VERSION_FILE))
    
    # バージョン情報ファイルが存在しない場合は作成
    unless File.exist?(VERSION_FILE)
      File.open(VERSION_FILE, 'w') do |f|
        f.puts YAML.dump({})
      end
    end
  end

  def run(args)
    if args.empty?
      # 引数なしの場合はinstallを実行
      install
      return
    end

    command = args.shift
    
    case command
    when 'install'
      install
    when 'init'
      init
    when 'update'
      update
    when 'list'
      list
    when 'config'
      config
    when '-h', '--help', 'help'
      help
    else
      puts "不明なコマンド: #{command}"
      help
    end
  end

  def init
    puts "AIルール設定ファイルを初期化しています..."
    
    if File.exist?('.airu')
      puts "警告: .airuファイルが既に存在します。上書きしますか？ [y/N]"
      response = gets.chomp.downcase
      return unless response == 'y'
    end
    
    # デフォルトの.airuファイルを作成
    File.open('.airu', 'w') do |f|
      f.puts "# AIルール設定ファイル"
      f.puts "# 各行に使用するルールを記述してください"
      f.puts "# 例:"
      
      # 設定ファイルからデフォルトルールを取得
      default_rules = @config['default_rules'] || ['project-rule', 'command-rule']
      default_rules.each do |rule|
        f.puts "#{rule}"
      end
    end
    
    puts ".airuファイルを作成しました。"
    puts "必要に応じてルールを編集してください。"
  end

  def install
    puts "AIルールをインストールしています..."
    
    # .airuファイルの存在確認
    unless File.exist?('.airu')
      puts "エラー: .airuファイルが見つかりません。"
      puts "airu initコマンドを実行して.airuファイルを作成してください。"
      return
    end
    
    # .airuファイルからルールを読み込む
    rules = []
    File.readlines('.airu').each do |line|
      line = line.strip
      next if line.empty? || line.start_with?('#')
      rules << line
    end
    
    if rules.empty?
      puts "警告: .airuファイルにルールが指定されていません。"
      return
    end
    
    # ルールをインストール
    rules.each do |rule|
      install_rule(rule)
    end
    
    puts "インストール完了！"
  end

  def install_rule(rule_name)
    puts "  ルール '#{rule_name}' をインストールしています..."
    
    # ルールの存在確認
    rule_dir = File.join(@rules_dir, rule_name)
    unless Dir.exist?(rule_dir)
      puts "  エラー: ルール '#{rule_name}' が見つかりません。"
      puts "  #{@rules_dir} ディレクトリにルールが存在するか確認してください。"
      return false
    end
    
    # プロジェクト内のルール保存先ディレクトリを作成
    project_rules_dir = File.join(Dir.pwd, '.cursor', 'rules')
    FileUtils.mkdir_p(project_rules_dir) unless Dir.exist?(project_rules_dir)
    
    # ルールファイルのコピー
    rule_files = Dir.glob(File.join(rule_dir, '**', '*'))
    if rule_files.empty?
      puts "  警告: ルール '#{rule_name}' にファイルが見つかりません。"
      return false
    end
    
    # ルールファイルの保存先パス
    target_file = File.join(project_rules_dir, "#{rule_name}.mdc")
    
    # ルールファイルをコピー
    begin
      # rule.mdファイルを探す
      rule_md_file = rule_files.find { |f| File.basename(f) == 'rule.md' }
      
      if rule_md_file
        FileUtils.cp(rule_md_file, target_file)
        
        # ルールのバージョン情報を更新
        update_rule_version(rule_name, get_rule_version(rule_md_file))
        
        puts "  ルール '#{rule_name}' を #{target_file} にインストールしました。"
        return true
      else
        # rule.mdがない場合は最初のファイルをコピー
        FileUtils.cp(rule_files.first, target_file)
        
        # ルールのバージョン情報を更新
        update_rule_version(rule_name, get_rule_version(rule_files.first))
        
        puts "  ルール '#{rule_name}' を #{target_file} にインストールしました。"
        puts "  警告: rule.mdファイルが見つからなかったため、別のファイルをコピーしました。"
        return true
      end
    rescue => e
      puts "  エラー: ルール '#{rule_name}' のインストール中にエラーが発生しました: #{e.message}"
      return false
    end
  end

  def get_rule_version(rule_file)
    # ファイルの内容からバージョン情報を抽出
    # 例: "# Version: 1.0.0" という行を探す
    version = "0.0.0" # デフォルトバージョン
    
    if File.exist?(rule_file)
      File.readlines(rule_file).each do |line|
        if line =~ /^#\s*Version:\s*(\d+\.\d+\.\d+)/i
          version = $1
          break
        end
      end
    end
    
    version
  end

  def update_rule_version(rule_name, version)
    # バージョン情報ファイルを読み込む
    versions = {}
    if File.exist?(VERSION_FILE)
      begin
        versions = YAML.load_file(VERSION_FILE) || {}
      rescue
        versions = {}
      end
    end
    
    # バージョン情報を更新
    versions[rule_name] = {
      'version' => version,
      'installed_at' => Time.now.to_s
    }
    
    # バージョン情報ファイルを保存
    File.open(VERSION_FILE, 'w') do |f|
      f.puts YAML.dump(versions)
    end
  end

  def update
    puts "AIルールを更新しています..."
    
    # .airuファイルの存在確認
    unless File.exist?('.airu')
      puts "エラー: .airuファイルが見つかりません。"
      puts "airu initコマンドを実行して.airuファイルを作成してください。"
      return
    end
    
    # .airuファイルからルールを読み込む
    rules = []
    File.readlines('.airu').each do |line|
      line = line.strip
      next if line.empty? || line.start_with?('#')
      rules << line
    end
    
    if rules.empty?
      puts "警告: .airuファイルにルールが指定されていません。"
      return
    end
    
    # バージョン情報ファイルを読み込む
    versions = {}
    if File.exist?(VERSION_FILE)
      begin
        versions = YAML.load_file(VERSION_FILE) || {}
      rescue
        versions = {}
      end
    end
    
    # ルールを更新
    updated = false
    rules.each do |rule|
      rule_dir = File.join(@rules_dir, rule)
      unless Dir.exist?(rule_dir)
        puts "  エラー: ルール '#{rule}' が見つかりません。"
        next
      end
      
      # rule.mdファイルを探す
      rule_files = Dir.glob(File.join(rule_dir, '**', '*'))
      rule_md_file = rule_files.find { |f| File.basename(f) == 'rule.md' } || rule_files.first
      
      next unless rule_md_file
      
      # 現在のバージョンを取得
      current_version = get_rule_version(rule_md_file)
      
      # インストール済みのバージョンを取得
      installed_version = versions.dig(rule, 'version') || "0.0.0"
      
      # バージョンを比較
      if compare_versions(current_version, installed_version) > 0
        puts "  ルール '#{rule}' を更新しています (#{installed_version} -> #{current_version})..."
        install_rule(rule)
        updated = true
      else
        puts "  ルール '#{rule}' は最新です (#{installed_version})。"
      end
    end
    
    if updated
      puts "更新完了！"
    else
      puts "すべてのルールは最新です。"
    end
  end

  def compare_versions(version1, version2)
    # バージョン文字列を比較
    # 戻り値: version1 > version2 なら 1, version1 < version2 なら -1, 等しいなら 0
    v1_parts = version1.split('.').map(&:to_i)
    v2_parts = version2.split('.').map(&:to_i)
    
    # 桁数を揃える
    while v1_parts.size < 3
      v1_parts << 0
    end
    
    while v2_parts.size < 3
      v2_parts << 0
    end
    
    # 比較
    3.times do |i|
      if v1_parts[i] > v2_parts[i]
        return 1
      elsif v1_parts[i] < v2_parts[i]
        return -1
      end
    end
    
    return 0 # 等しい
  end

  def list
    puts "インストール済みのAIルール:"
    
    # バージョン情報ファイルを読み込む
    versions = {}
    if File.exist?(VERSION_FILE)
      begin
        versions = YAML.load_file(VERSION_FILE) || {}
      rescue
        versions = {}
      end
    end
    
    if versions.empty?
      puts "  インストール済みのルールはありません。"
      return
    end
    
    # インストール済みルールを表示
    versions.each do |rule, info|
      puts "  #{rule} (バージョン: #{info['version']}, インストール日時: #{info['installed_at']})"
    end
  end

  def config
    puts "設定ファイルを初期化しています..."
    
    if File.exist?('.airu.yml')
      puts "警告: .airu.ymlファイルが既に存在します。上書きしますか？ [y/N]"
      response = gets.chomp.downcase
      return unless response == 'y'
    end
    
    # デフォルトの設定ファイルを作成
    File.open('.airu.yml', 'w') do |f|
      f.puts YAML.dump(DEFAULT_CONFIG)
    end
    
    puts ".airu.ymlファイルを作成しました。"
    puts "必要に応じて設定を編集してください。"
  end

  def load_config
    # プロジェクトディレクトリの設定ファイルを読み込む
    config_file = File.join(Dir.pwd, '.airu.yml')
    
    if File.exist?(config_file)
      begin
        config = YAML.load_file(config_file) || {}
        return DEFAULT_CONFIG.merge(config)
      rescue => e
        puts "警告: 設定ファイルの読み込み中にエラーが発生しました: #{e.message}"
      end
    end
    
    # 設定ファイルがない場合はデフォルト設定を使用
    DEFAULT_CONFIG
  end

  def help
    puts <<~HELP
      airu - AIルールマネージャー

      使い方:
        airu                AIルールをインストールします
        airu [コマンド]

      コマンド:
        init                .airuファイルを作成します
        install             AIルールをインストールします
        update              AIルールを更新します
        list                インストール済みのAIルールを表示します
        config              設定ファイル(.airu.yml)を作成します
        -h, --help, help    このヘルプを表示します

      詳細は https://github.com/s4na/homebrew-airu を参照してください。
    HELP
  end
end

# スクリプトとして実行された場合のみ実行
if __FILE__ == $0
  Airu.new.run(ARGV)
end 
